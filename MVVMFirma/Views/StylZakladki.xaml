<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MVVMFirma.Views">

    <!--RowDefinition-->
    <Style x:Key="1RowDefinitionStandardowy" TargetType="RowDefinition">
        <Setter Property="Height" Value="30"/>
    </Style>

    <!--ColumnDefinition-->
    <Style x:Key="1ColumnDefinitionStandardowy" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="100"/>
    </Style>
    <Style x:Key="1ColumnDefinitionSeparacyjny" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="10"/>
    </Style>
    <Style x:Key="1ColumnDefinitionSzeroki" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="210"/>
    </Style>
    <Style x:Key="1ColumnDefinitionBardzoSzeroki" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="420"/>
    </Style>

    <Style x:Key="MenuKolor" TargetType="MenuItem">
        <Setter Property="Foreground" Value="DarkSlateGray"/>
    </Style>

    <!--GRID-->
    <Style x:Key="Grid" TargetType="Grid">
        <Setter Property="Background" Value="#f5f5f5"/>
    </Style>
    <!--GRID-->
    <Style x:Key="GridMargin" TargetType="Grid">
        <Setter Property="Margin" Value="20,0,20,0"/>
    </Style>
    <!--RowDefinition-->
    <Style x:Key="RowDefinitionStandardowy" TargetType="RowDefinition">
        <Setter Property="Height" Value="50"/>
    </Style>
    <Style x:Key="Row80" TargetType="RowDefinition">
        <Setter Property="Height" Value="80"/>
    </Style>
     <!--RowTytulowy-->
    <Style x:Key="RowTytulowy" TargetType="RowDefinition">
        <Setter Property="Height" Value="60"/>
    </Style>
    <Style x:Key="Row200" TargetType="RowDefinition">
        <Setter Property="Height" Value="200"/>
    </Style>
    <Style x:Key="Row120" TargetType="RowDefinition">
        <Setter Property="Height" Value="120"/>
    </Style>
    <!--RowNaglowekTabeli-->
    <Style x:Key="RowNaglowekTabeli" TargetType="RowDefinition">
        <Setter Property="Height" Value="35"/>
    </Style>
    <!--Kolumny-->
    <Style x:Key="Kolumna240" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="240"/>
    </Style>
    <Style x:Key="Kolumna180" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="180"/>
    </Style>
    <Style x:Key="Kolumna150" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="150"/>
    </Style>
    <Style x:Key="KolumnaSeparacyjna" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="60"/>
    </Style>
    <Style x:Key="Kolumna35" TargetType="ColumnDefinition">
        <Setter Property="Width" Value="35"/>
    </Style>

    <!--Separator-->
    <Style x:Key="Separator" TargetType="Separator">
        <Setter Property="Margin" Value="0,59,0,0"/>
    </Style>
    <!--Separator-->
    <Style x:Key="Separator54" TargetType="Separator">
        <Setter Property="Margin" Value="0,54,0,0"/>
    </Style>

    <!--Button-->
    <Style x:Key="ButtonStandardowy" TargetType="Button">
        <Setter Property="Width" Value="170"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Background" Value="#D5C7D9"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <!--ButtonMaly-->
    <Style x:Key="ButtonMaly" BasedOn ="{StaticResource ButtonStandardowy}" TargetType="Button">
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    <Style x:Key="ButtonMaly33" BasedOn ="{StaticResource ButtonStandardowy}" TargetType="Button">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Background" Value="#D5C7D9"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Height" Value="28" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    <Style x:Key="ButtonMalyW" BasedOn ="{StaticResource ButtonMaly}" TargetType="Button">
        <Setter Property="Margin" Value="15,0,0,0"/>
    </Style>

    <!--LabelWiekszy-->
    <Style x:Key="LabelWiekszy" TargetType="Label">
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
    </Style>
    <!--LabelStandardowy-->
    <Style x:Key="LabelStandardowy" TargetType="Label">
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="LabelStandardowyW" BasedOn="{StaticResource LabelStandardowy}" TargetType="Label">
        <Setter Property="Margin" Value="15,0,0,0"/>
    </Style>
    <Style x:Key="LabelStandardowyF" BasedOn="{StaticResource LabelStandardowy}" TargetType="Label">
        <Setter Property="Margin" Value="40,0,0,0"/>
    </Style>
    <Style x:Key="LabelStandardowyP" BasedOn="{StaticResource LabelStandardowy}" TargetType="Label">
        <Setter Property="Margin" Value="20,0,0,0"/>
    </Style>
    <!--LabelStandardowyPogrubiony-->
    <Style x:Key="LabelStandardowyPogrubiony" BasedOn="{StaticResource LabelStandardowy}" TargetType="Label">
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="LabelStandardowyPogrubionyW" BasedOn="{StaticResource LabelStandardowyPogrubiony}" TargetType="Label">
        <Setter Property="Margin" Value="50,0,0,0"/>
    </Style>
    <Style x:Key="LabelStandardowyPogrubionyP" BasedOn="{StaticResource LabelStandardowyPogrubiony}" TargetType="Label">
        <Setter Property="Margin" Value="20,0,0,0"/>
    </Style>
    <!--LabelNaglowekTabeli-->
    <Style x:Key="LabelNaglowekTabeli" BasedOn="{StaticResource LabelStandardowyPogrubiony}" TargetType="Label">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="#D5C7D9"/>
    </Style>
    <Style x:Key="LabelNaglowekTabeliF" BasedOn="{StaticResource LabelNaglowekTabeli}" TargetType="Label">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Width" Value="240"/>
    </Style>
    <!--ToggleButton-->
    <Style x:Key="ToggleButtonStandardowy" TargetType="ToggleButton">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalAlignment" Value="left"/>
    </Style>
    <!--TextBox-->
    <Style x:Key="TextBoxStandardowy" TargetType="TextBox">
        <Setter Property="Width" Value="354"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="#FFF6F6F6"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <!--dzieki temu nie ma obramowania-->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBoxSzeroki" BasedOn="{StaticResource TextBoxStandardowy}" TargetType="TextBox">
        <Setter Property="Width" Value="210"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="BorderBrush" Value="#E5E6E7"/>
        <Setter Property="Margin" Value="0, 0, 20, 0" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="TextBoxStandardowy2" BasedOn="{StaticResource TextBoxStandardowy}" TargetType="TextBox">
        <Setter Property="Width" Value="170"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="BorderBrush" Value="#E5E6E7"/>
        <Setter Property="Margin" Value="0, 0, 20, 0" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBoxW" TargetType="TextBox">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <!--TextBoxMaly-->
    <Style x:Key="TextBoxMaly" TargetType="TextBox">
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--TextBox-->
    <Style x:Key="TextBoxBialyZRamka" TargetType="TextBox">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxBialyZRamkaSzeroki" TargetType="TextBox">
        <Setter Property="Width" Value="210"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ExpanderHeader-->
    <Style x:Key="ExpanderHeader" TargetType="Expander">
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="TextBoxBialyZRamka240" BasedOn="{StaticResource TextBoxBialyZRamka}" TargetType="TextBox">
        <Setter Property="Width" Value="240"/>
    </Style>
    <Style x:Key="TextBoxBialyZRamka90" BasedOn="{StaticResource TextBoxBialyZRamka}" TargetType="TextBox">
        <Setter Property="Width" Value="90"/>
    </Style>
    <Style x:Key="TextBoxBialyZRamka130" BasedOn="{StaticResource TextBoxBialyZRamka}" TargetType="TextBox">
        <Setter Property="Width" Value="130"/>
    </Style>
    <ControlTemplate x:Key="TextBoxZaokraglony" TargetType="{x:Type TextBox}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ComboBoxStandardowy-->
    <Style x:Key="ComboBoxStandardowy" TargetType="ComboBox">
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="Width" Value="180"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style x:Key="ComboBoxMaly" BasedOn="{StaticResource ComboBoxStandardowy}" TargetType="ComboBox">
        <Setter Property="Width" Value="130"/>
        <Setter Property="Height" Value="30"/>
    </Style>

    <Style x:Key="ComboBoxStandardowyW" BasedOn="{StaticResource ComboBoxStandardowy}" TargetType="ComboBox">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="35,0,0,0"/>
    </Style>

    <Style x:Key="ComboBoxKafelki" BasedOn="{StaticResource ComboBoxStandardowy}" TargetType="ComboBox">
        <Setter Property="Width" Value="60"/>
        <Setter Property="Height" Value="25"/>
    </Style>

    <!--RabioButton-->
    <Style x:Key="RadioButtonStandardowy" TargetType="RadioButton" >
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <!--DatePickerStandardowy-->
    <Style x:Key="DatePickerStandardowy" TargetType="DatePicker">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="120"/>
    </Style>

    <Style x:Key="DatePickerStandardowyF" BasedOn="{StaticResource DatePickerStandardowy}" TargetType="DatePicker">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Width" Value="240"/>
    </Style>


    <!--DateGridColumn-->
    <Style x:Key="DateGridStandardowy" TargetType="DataGrid">
        <Setter Property="Background" Value="#D5C7D9"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="20,0,0,0"/>
        <Setter Property="Width" Value="540"/>

    </Style>
    <Style x:Key="DateGridStandardowyKolorD"  TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="#D5C7D9"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Width" Value="100"/>
    </Style>
    <Style x:Key="DateGridStandardowyKolorBM" BasedOn="{StaticResource DateGridStandardowyKolorD}" TargetType="DataGridColumnHeader">
        <Setter Property="Width" Value="40"/>
    </Style>



    <!--MalyToggleButton-->
    <Style x:Key="MalyToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="#D5C7D9"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>


    <!--RoundedButton-->
    <ControlTemplate x:Key="RoundedButton" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#EAB01E"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#EAB01E"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#F1CA68"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#F1CA68"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--RoundedButtonCiemnyroz-->
    <ControlTemplate x:Key="ButtonCiemnyRoz" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#804478"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ToggleButtonZaokraglony-->

    <ControlTemplate x:Key="ToggleButtonZaokraglony" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#804478"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#804478"/>
                <Setter Property="Foreground" Value="white"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>

            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SwitchTypeToggleButtonOkragly"  TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="34"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>

    </Style>

    <!--DuzyTextBlock-->
    <Style x:Key="DuzyTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Height" Value="300"/>
        <Setter Property="Width" Value="800"/>
    </Style>

    <!--ToggleButton-->
    <Style x:Key="SwitchTypeToggleButton" BasedOn="{StaticResource SwitchTypeToggleButtonOkragly}" TargetType="{x:Type ToggleButton}">


        <Style.Resources>
            <Color x:Key="Color.Additional.LightGrey">#989EA8</Color>
            <Color x:Key="Color.Additional.MediumGrey">#61656B</Color>
            <Color x:Key="Color.MedtronicBranding.MedtronicBlue">#804478</Color>
            <Color x:Key="Color.MedtronicBranding.CobaltBlue">#D5C7D9</Color>

            <Style x:Key="ToggleButtonContentTextbox" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
            </Style>
            <SolidColorBrush x:Key="ToggleButtonFalseBackground"
                         Color="{StaticResource Color.Additional.LightGrey}" />
            <SolidColorBrush x:Key="ToggleButtonTrueBackground"
                         Color="{StaticResource Color.MedtronicBranding.CobaltBlue}" />
            <SolidColorBrush x:Key="ToggleButtonFalseForeground"
                         Color="{StaticResource Color.Additional.MediumGrey}" />
            <SolidColorBrush x:Key="ToggleButtonTrueForeground"
                         Color="{StaticResource Color.MedtronicBranding.MedtronicBlue}" />
            <TextBlock x:Key="OffContent"
                   Style="{StaticResource ToggleButtonContentTextbox}"
                   Text="Off" />
         

        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="MainRow">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="TopRow" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Ellipse x:Name="BackgroundEllipse1"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Left"
                                 Fill="{StaticResource ToggleButtonTrueBackground}" />
                            <Ellipse x:Name="BackgroundEllipse2"
                                 Grid.Row="0"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Right"
                                 Fill="{StaticResource ToggleButtonFalseBackground}" />
                            <Border x:Name="BackgroundBorder"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"
                                Background="{StaticResource ToggleButtonTrueBackground}" />
                        </Grid>
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="AnimationWidth" />
                                <ColumnDefinition Width="{Binding ElementName=MainRow,
                        Path=ActualHeight}" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="AnimationSizeBorder"
                                Grid.Column="0" />
                            <!--<ContentControl Grid.Column="0"
                                        Style="{StaticResource OnContentControl}" />-->
                        </Grid>
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding ElementName=MainRow,
                Path=ActualHeight}" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <!--<ContentControl Grid.Column="1"
                                        Style="{StaticResource OffContentControl}" />-->
                        </Grid>
                        <Grid Background="Transparent">
                            <StackPanel HorizontalAlignment="Left"
                                    Orientation="Horizontal">
                                <Border Width="{Binding ElementName=AnimationSizeBorder,
                Path=ActualWidth}" />
                                <Ellipse x:Name="ForegroundEllipse"
                                     Width="{Binding ElementName=MainRow,
                                                     Path=ActualHeight}"
                                     Height="{Binding ElementName=MainRow,
                                                      Path=ActualHeight}"
                                     HorizontalAlignment="Right"
                                     Fill="{StaticResource ToggleButtonTrueForeground}" />
                            </StackPanel>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background"
                Value="{StaticResource ToggleButtonFalseBackground}" />
                            <Setter TargetName="ForegroundEllipse" Property="Fill"
                Value="{StaticResource ToggleButtonFalseForeground}" />
                          
                            <Setter TargetName="AnimationSizeBorder" Property="Width" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--RadioButton-->
    <Style x:Key="RadioButtonStyle111" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">

                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#804478"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="#804478" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFF3F9FF"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF5593FF"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFE6E6E6"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FFBCBCBC"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF707070"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="#FFD9ECFF"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="#FF3C77DD"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="#FF212121"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxNieedytowalny" BasedOn="{StaticResource TextBoxStandardowy}" TargetType="TextBox">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Background" Value="LightGray"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="ExpanderStandardowy" TargetType="Expander">
        <Setter Property="Margin" Value="4"/>
    </Style>
    <Style x:Key="ExpanderOtwarty" TargetType="Expander" BasedOn="{StaticResource ExpanderStandardowy}">
        <Setter Property="IsExpanded" Value="True"/>
    </Style>
    <Style x:Key="DataGridStandardowy" TargetType="DataGrid">
        <Setter Property="Margin" Value="2"/>
    </Style>
</ResourceDictionary>