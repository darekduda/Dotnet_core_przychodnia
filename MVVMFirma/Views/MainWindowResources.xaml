<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:MVVMFirma.ViewModels"
                    xmlns:vw="clr-namespace:MVVMFirma.Views"
                    >


    <!--// Toggle Button Style Template //-->

    <ImageBrush x:Key="tb_mouse_over"
                ImageSource="/MVVMFirma;component/Content/Icons/menu.png"/>
    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <vw:NowyAdresView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyPacjentViewModel}">
        <vw:NowyPacjentView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyPacjenciViewModel}">
        <vw:WszyscyPacjenciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyKontrahentViewModel}">
        <vw:NowyKontrahentView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaWizytaViewModel}">
        <vw:NowaWizytaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszytskieWizytyViewModel}">
        <vw:WszystkieWizytyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
        <vw:WszystkieFakturyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:UstawieniaViewModel}">
        <vw:UstawieniaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportSprzedazyViewModel}">
        <vw:RaportSprzedazyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportPacjentowViewModel}">
        <vw:RaportPacjentowView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:RaportUslugViewModel}">
        <vw:RaportUslugView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieAdresyViewModel}">
        <vw:WszystkieAdresyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyKontrahenciViewModel}">
        <vw:WszyscyKontrahenciView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaPozycjaFakturyViewModel}">
        <vw:NowaPozycjaFakturyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyKrajViewModel}">
        <vw:NowyKrajView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieKrajeViewModel}">
        <vw:WszystkieKrajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyOddzialViewModel}">
        <vw:NowyOddzialView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieOddzialyNFZViewModel}">
        <vw:WszystkieOddzialyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowySposobPlatnosciViewModel}">
        <vw:NowySposobPlatnosciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieSposobyPlatnosciViewModel}">
        <vw:SposobyPlatnosciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyStatusPacjentaViewModel}">
        <vw:NowyStatusPacjentaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieStatusyPacjentaViewModel}">
        <vw:StatusPacjentaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyTypWizytyViewModel}">
        <vw:NowyTypWizytyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieTypyWizytViewModel}">
        <vw:WszystkieTypyWizytView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaUslugaViewModel}">
        <vw:NowaUslugaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieUslugiViewModel}">
        <vw:WszystkieUslugiView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaUslugaKontrahentViewModel}">
        <vw:NowaUslugaKontrahentaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieUslugiKontrahentaViewModel}">
        <vw:WszystkieUslugiView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyPracownikViewModel}">
        <vw:NowyPracownikView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyPracownicyViewModel}">
        <vw:WszyscyPracownicyView/>
    </DataTemplate>

    <Style x:Key="MenuKolor" TargetType="MenuItem">
        <Setter Property="Foreground" Value="DarkSlateGray"/>
    </Style>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
            Background="Blue" 
            BorderBrush="Green" 
            BorderThickness="1" 
            CornerRadius="5" 
            Margin="4" 
            Padding="4" 
            SnapsToDevicePixels="True" 
            >
                        <TextBlock             
              FontSize="14"
              FontWeight="Bold"
              Foreground="yellow" 
              HorizontalAlignment="Center"  
              Text="{TemplateBinding Content}" 
              />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel
                        >
                        <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
                            
              />
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="GreenYellow" />
        <Setter Property="BorderBrush" Value="Blue" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="0">
            <!-- Margin="2,6" -->
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock >
       <!-- to wczesniej byl hyperlink-->
            <Button  Width="150" Height="30"  FontSize="11" Margin="0" Background="#36474F" BorderThickness="0" Foreground="#C8CCCD" Command="{Binding Path=Command}" Template="{DynamicResource MenuButton22}"  >                
              <TextBlock Text="{Binding Path=DisplayName}" />
            </Button>
          </TextBlock>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button. 
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate" >
        <DockPanel Width="120">
            <Button 
        Command="{Binding Path=CloseCommand}"
        Content="X"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="0,1,0,0"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center"         
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <!-- to jest okienko pod naglowkiem np towar-->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
            Background="#e0e0e0"
            BorderBrush="#e0e0e0"
            IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}">
            <!-- Tutaj zaczyna sie kod odpowiedzialny za kolorowanie zakladek wiyta, wizyty, faktura, faktury-->
            <TabControl.Resources>
                <Style TargetType="TabItem" >
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0" >
                                    <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                                      Margin="10,2"
                                      />
                                    <!--   -->
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Border" Property="Background" Value="#804478" />
                                        <Setter Property="Foreground" Value="White" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter TargetName="Border" Property="Background" Value="#D5C7D9" />
                                        <Setter Property="Foreground" Value="#FF534C4C" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
            <!-- Tutaj koczy sie kod odpowiedzialny za kolorowaniezakladek-->
        </TabControl>
    </DataTemplate>

    <!--Dopisane -->

    <Style x:Key="Row30" TargetType="RowDefinition">
        <Setter Property="Height" Value="30"/>
    </Style>
    <Style x:Key="Row50" TargetType="RowDefinition">
        <Setter Property="Height" Value="50"/>
    </Style>

    <Style x:Key="Menu" TargetType="Menu">
        <Setter Property="Menu.Background" Value="LightGray"/>
    </Style>
    <Style x:Key="Toolbar" TargetType="ToolBar">
        <Setter Property="ToolBar.Background" Value="LightGray"/>
        <Setter Property="ToolBar.Margin" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="#e0e0e0"/>
    </Style>

    <Style x:Key="Button" TargetType="Button">
        <Setter Property="Button.Width" Value="100"/>
        <Setter Property="Button.Height" Value="60"/>
        <Setter Property="Button.Background" Value="Yellow"/>
        <Setter Property="Button.Margin" Value="2"/>
    </Style>
    <Style x:Key="TextBox1" TargetType="TextBox">
        <Setter Property="TextBox.Width" Value="100"/>
        <Setter Property="TextBox.Height" Value="60"/>
        <Setter Property="TextBox.Background" Value="White"/>
        <Setter Property="TextBox.Margin" Value="2"/>
        <Setter Property="TextBox.FontSize" Value="13"/>
        <Setter Property="TextBox.HorizontalAlignment" Value="Left"/>
        <Setter Property="TextBox.VerticalAlignment" Value="Center"/>

    </Style>
    <Style x:Key="Menu3" TargetType="Menu">
        <Setter Property="Menu.Background" Value="#FF1D1B1B"/>
    </Style>
    <Style x:Key="Menu4" TargetType="Menu">
        <Setter Property="Menu.Background" Value="#FF1D1B1B"/>
    </Style>
    <Style x:Key="Ikonki" TargetType="ToggleButton">
        <Setter Property="ToggleButton.Width" Value="40"/>
        <Setter Property="ToggleButton.Height" Value="40"/>
        <Setter Property="ToggleButton.Margin" Value="10,0,10,0"/>
    </Style>

    <Style x:Key="BorderK" TargetType="Border">
        <Setter Property="Background" Value="#e0e0e0"/>
    </Style>

    <Style x:Key="StatusBar" TargetType="StatusBar">
        <Setter Property="StatusBar.Background" Value="LightGray"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="StatusBarItem1" TargetType="TextBlock">
        <Setter Property="Margin" Value="10,0,10,0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#FF534C4C"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontWeight" Value="Bold"/>

    </Style>
    <Style x:Key="StatusBarItem2" TargetType="TextBlock">
        <Setter Property="Margin" Value="0,0,10,0"/>
        <Setter Property="FontSize" Value="9"/>
    </Style>





    <ControlTemplate x:Key="ToggleButtonTriggers" TargetType="{x:Type ToggleButton}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">

                <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="HamButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">


            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">

                            <Setter Property="Background" TargetName="border" Value="{StaticResource tb_mouse_over}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="Foreground" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--RoundedButton-->
    <ControlTemplate x:Key="RoundedButton" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#EAB01E"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#EAB01E"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#F1CA68"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#F1CA68"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--MenuButton-->
    <ControlTemplate x:Key="MenuButton" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#D5C7D9"/>
                <Setter Property="Foreground" Value="#FF534C4C" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="Foreground" Value="white" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--MenuButton-->
    <ControlTemplate x:Key="MenuButton2" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#36474F"/>
                <Setter Property="Foreground" Value="#FF534C4C" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="Foreground" Value="white" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <ControlTemplate x:Key="MenuButton22" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                              Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#36474F"/>
                <Setter Property="Foreground" Value="#C8CCCD" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#804478"/>
                <Setter Property="Foreground" Value="white" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!--Nagłówki tabeli-->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#D5C7D9" />
        <Setter Property="Height" Value="30"/>
        <Setter Property="Foreground" Value="#FF534C4C" />
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Padding" Value="4 0 0 0"/>
        <Setter Property="SeparatorBrush" Value="#FF534C4C"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!--Pola tabeli-->

    <Style x:Key="{x:Type DataGrid}"
TargetType="{x:Type DataGrid}">
         <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="AlternatingRowBackground"
Value="White" />
        <Setter Property="AlternationCount"
Value="2" />
        <Setter Property="Background"
Value="White" />
        <Setter Property="BorderThickness"
Value="0" />
        <Setter Property="Foreground"
Value="Black" />
        <Setter Property="HeadersVisibility"
Value="Column" />
        <Setter Property="RowBackground"
Value="#BDBDBD" />
    </Style>



</ResourceDictionary>